import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

/**
 * The name of your mod. Used to create a mod folder name (and the name of your mod, if using auto-updated mod_info.json).
 * Defaults to the name of the mod's folder.
 */
val modName = "MnemonicUtils"

/**
 * Where your Starsector game is installed to.
 * Note: On Linux, if you installed Starsector into your home directory, you have to write /home/<user>/ instead of ~/
 */
val starsectorDirectory = if(providers.gradleProperty("starsector.dir").isPresent) providers.gradleProperty("starsector.dir").get() else "/home/jannes/games/starsector"

/** Defaults to the name of your mod, with spaces replaced by hyphens. */
val modFolderName = modName.replace(" ", "-")
//

/** Set below to `true` to automatically create mod_info.json and Version Checker files. */
val shouldAutomaticallyCreateMetadataFiles = true
// Then, if above is set to true, update the rest of the information below in SECTION B.
val modVersion = "0.5.0"
val jarFileName = "${modName.replace(" ", "-")}.jar"
val modId = "dp_mnemonic_utils"
val modAuthor = "DesperatePeter"
val modDescription = "Offers exploration utility features, such as marking known sensor traces and gates or filtering out worthless loot. Check LunaSettings for details."
val gameVersion = "0.98a"
val jars = arrayOf("jars/$jarFileName")
val modPlugin = "com.dp.mnemonicutils.MnemonicBasePlugin"
val isUtilityMod = true
val masterVersionFile = "https://raw.githubusercontent.com/DesperatePeter/mnemonic-sensors/master/$modId.version"
val modThreadId = "29517"

// Note: On Linux, change the below line to `val starsectorCoreDirectory = "${starsectorDirectory}"`
val starsectorCoreDirectory = "${starsectorDirectory}/starsector-core"
val starsectorModDirectory = "${starsectorDirectory}/mods"
val modInModsFolder = File("$starsectorModDirectory/${modFolderName}")

dependencies {
    implementation("com.thoughtworks.xstream:xstream:1.4.10")
    implementation("org.lwjgl.lwjgl:lwjgl:2.9.3")
    implementation("org.lwjgl.lwjgl:lwjgl_util:2.9.3")
    implementation("log4j:log4j:1.2.9")
    implementation("org.json:json:20090211")
    implementation("net.java.jinput:jinput:2.0.7")
    implementation("org.codehaus.janino:janino:3.0.7")
    implementation(fileTree(starsectorCoreDirectory) {
        include(
            "starfarer.api.jar",
            //"starfarer.api-sources.jar",
            "starfarer_obf.jar",
            "fs.common_obf.jar",
            "json.jar",
            "xstream-1.4.10.jar",
            "log4j-1.2.9.jar",
            "lwjgl.jar",
            "lwjgl_util.jar"
        )
    })

    if (File(starsectorModDirectory).exists()) {
        compileOnly(fileTree(starsectorModDirectory) {
            include("**/*.jar")
            exclude("**/$jarFileName", "**/lib/*", "**/libs/*")
        })
    } else {
        println("$starsectorModDirectory did not exist, not adding mod folder dependencies.")
    }


    val kotlinVersionInLazyLib = "2.1.20"
    // Get kotlin sdk from LazyLib during runtime, only use it here during compile time
    compileOnly("org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersionInLazyLib")
    // compileOnly("org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersionInLazyLib")
}

// ==============
// ==== SECTION E: GRADLE TASKS ====
// You probably won't ever need to change this *except* to add a specific mod dependency in mod_info.json
tasks {
    //////////////////////////////////////////
    // SECTION E.1: BUILD A .JAR
    named<Jar>("jar")
    {
        // Tells Gradle to put the .jar file in the /jars folder.
        destinationDirectory.set(file("$rootDir/jars"))
        // Sets the name of the .jar file.
        archiveFileName.set(jarFileName)
    }

    //////////////////////////////////////////
    // SECTION E.2: CREATES & UPDATES METADATA (MOD_INFO.JSON AND VERSION CHECKER) FILES
    register("create-metadata-files") {
        val version = modVersion.split(".")
        System.setProperty("line.separator", "\n") // Use LF instead of CRLF like a normal person

        if (shouldAutomaticallyCreateMetadataFiles) {
            // Generates a mod_info.json from the variables defined at the top of this script.
            File(projectDir, "mod_info.json")
                .writeText(
                    """
                    # THIS FILE IS GENERATED BY build.gradle.kts. (Note that Starsector's json parser permits `#` for comments)
                    {
                        "id": "${modId}",
                        "name": "${modName}",
                        "author": "${modAuthor}",
                        "utility": "${isUtilityMod}",
                        "version": { "major":"${version[0]}", "minor": "${version[1]}", "patch": "${version[2]}" },
                        "description": "${modDescription}",
                        "gameVersion": "${gameVersion}",
                        "jars":[${jars.joinToString() { "\"$it\"" }}],
                        "modPlugin":"${modPlugin}",
                        "dependencies": [
                            {
                                "id": "lw_lazylib",
                                "name": "LazyLib",
                                # "version": "2.6" # If a specific version or higher is required, include this line
                            },
                            {
                                "id": "lunalib",
                                "name": "LunaLib",
                            },
                        ]
                    }
                """.trimIndent()
                )

            // Generates a Version Checker csv file from the variables defined at the top of this script.
            with(File(projectDir, "data/config/version/version_files.csv")) {
                this.parentFile.mkdirs()
                this.writeText(
                    """
                    version file
                    ${modId}.version

                """.trimIndent()
                )
            }


            // Generates a Version Checker .version file from the variables defined at the top of this script.
            File(projectDir, "${modId}.version")
                .writeText(
                    """
                    # THIS FILE IS GENERATED BY build.gradle.kts.
                    {
                        "masterVersionFile":"${masterVersionFile}",
                        "modName":"${modName}",
                        "modThreadId":${modThreadId},
                        "modVersion":
                        {
                            "major":${version[0]},
                            "minor":${version[1]},
                            "patch":${version[2]}
                        },
                        "directDownloadURL": "https://github.com/DesperatePeter/mnemonic-sensors/releases/download/v${version[0]}.${version[1]}.${version[2]}/MnemonicUtils-v${version[0]}.${version[1]}.${version[2]}.zip",
                        "changelogURL": "https://raw.githubusercontent.com/DesperatePeter/mnemonic-sensors/master/changelog.txt"
                    }
                """.trimIndent()
                )
        }

        // Creates a file with the mod name to tell the Github Actions script the name of the mod.
        // Not needed if not using Github Actions (but doesn't hurt to keep).
        with(File(projectDir, ".github/workflows/mod-folder-name.txt")) {
            this.parentFile.mkdirs()
            this.writeText(modFolderName)
        }
    }

    //////////////////////////////////////////
    // SECTION E.3: COPY TO /MODS
    // If enabled, will copy your mod to the /mods directory when run (and whenever gradle syncs).
    // Disabled by default, as it is not needed if your mod directory is symlinked into your /mods folder.
    register<Copy>("install-mod") {
        val enabled = false;

        if (!enabled) return@register

        println("Installing mod into Starsector mod folder...")

        val destinations = listOf(modInModsFolder)

        destinations.forEach { dest ->
            copy {
                from(projectDir)
                into(dest)
                exclude(".git", ".github", ".gradle", ".idea", ".run", "gradle")
            }
        }
    }
}

//
// ==============
// ==== SECTION F: SOURCE CODE LOCATIONS ====
sourceSets.main {
    // Add new folder names here, with the path, if your Java source code isn't in /src.
    java.setSrcDirs(listOf("src"))
}
kotlin.sourceSets.main {
    // Add new folder names here, with the path, if your Kotlin source code isn't in /src.
    kotlin.setSrcDirs(listOf("src"))
    // List of where resources (the "data" folder) are.
    resources.setSrcDirs(listOf("data"))
}

// ================
// ==== DANGER ====
// -----DON'T TOUCH STUFF BELOW THIS LINE UNLESS YOU KNOW WHAT YOU'RE DOING  -------------------
plugins {
    kotlin("jvm") version "2.1.20"
    java
}

version = modVersion

repositories {
    maven(url = uri("$projectDir/libs"))
    mavenCentral()
}

// Compile Kotlin to Java 6 bytecode so that Starsector can use it (options are only 6 or 8)
tasks.withType<KotlinCompile> {
    kotlinOptions.jvmTarget = "17"
}
// Compile Java to Java 7 bytecode so that Starsector can use it
java.sourceCompatibility = JavaVersion.VERSION_17
java.targetCompatibility = JavaVersion.VERSION_17
